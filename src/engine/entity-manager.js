/**
 * Entity Manager
 * ===
 *
 * @module entityManager
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////
import Entity from './entity';

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////
const MAX_ENTITIES = 255;

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * EntityManager
 * @class
 */
class EntityManager {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  /**
   * @private
   * @type {Logger}
   */
  _logger;

  /**
   * @private
   * @type {int}
   */
  _nextId;

  /**
   *
   * @private
   * @type {Array}
   */
  _entities;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////

  /**
   * EntityManager
   * @constructor
   */
  constructor(logService) {
    this._logger = logService.register(this.constructor.name);
    this._nextId = 0;
    this._entities = [];
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Creates a new entity and returns the identifier.
   * @public
   * @return {int} The identifier for the entity.
   */
  create() {
    if (this._nextId > MAX_ENTITIES) throw new Error(`Error: Entity limit exceeded the maximum of ${MAX_ENTITIES}`);
    const ENTITY = Entity.create(this._nextId);

    this._entities[this._nextId] = ENTITY;
    this._nextId++;
    return ENTITY.id;
  }

  /**
   * Destroys the entity for the specified identifier.
   * @public
   * @param {int} id - The identifier for the entity.
   */
  destroy(id) {
    this._entities[id] = null;
  }

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method
   * @static
   * @param {LogService} logService -
   * @return {EntityManager}
   */
  static create(logService) {
    return new EntityManager();
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default EntityManager;
