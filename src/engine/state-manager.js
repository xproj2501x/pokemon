/**
 * State Manager
 * ===
 *
 * @module stateManager
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * StateManager
 * @class
 */
class StateManager {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  /**
   * @private
   * @type {Logger}
   */
  _logger;

  /**
   * @private
   * @type {MessageService}
   */
  _messageService;

  /**
   * @private
   * @type {Array}
   */
  _states;

  /**
   * @private
   * @type {State}
   */
  _currentState;

  /**
   * @private
   * @type {string}
   */
  _previousState;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////

  /**
   * StateManager
   * @constructor
   * @param {MessageService} messageService -
   * @param {Array} states - A collection of states for the simulation.
   * @param {string} initialState - The name of the initial state.
   */
  constructor(messageService, states, initialState) {
    this._messageService = messageService;
    this._states = states;
    this._currentState = this._states[initialState];
    this._init();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   *
   * @param {object} message
   */
  update(message) {
    const KEY_CODE = message.body.keyCode;

    if (this._currentState.locked) return;
    this._currentState.run(KEY_CODE);
    if (this._currentState.nextState) {
      const NEXT_STATE = this._states[this._currentState.nextState];

      this._changeState(NEXT_STATE);
    }
  }

  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////
  _init() {
    this._messageService.subscribe('INPUT_EVENT', (message) => this.update(message));
    this._currentState.enter();
  }

  /**
   *
   * @param {State} nextState
   * @private
   */
  _changeState(nextState) {
    this._currentState.exit();
    this._currentState = nextState;
    this._currentState.enter();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method.
   * @return {StateManager}
   */
  static create(messageService, states, initialState) {
    return new StateManager(messageService, states, initialState);
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default StateManager;
