/**
 * Move
 * ===
 *
 * @module move
 */
////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////
/**
 * The size of the data structure in bytes
 * @type {number}
 */
const SIZE = 12;

const KEYS = {
  EFFECT: 0x00,           // 1 Byte
  BASE_POWER: 0x01,       // 1 Byte
  TYPE: 0x02,             // 1 Byte
  ACCURACY: 0x03,         // 1 Byte
  PP: 0x04,               // 1 Byte
  EFFECT_ACCURACY: 0x05,  // 1 Byte
  AFFECTS_WHOM: 0x06,     // 1 Byte
  PRIORITY: 0x07,         // 1 Byte
  FLAGS: 0x08,            // 1 Byte
  PADDING: 0X09           // 3 Bytes
};

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * Move
 * @class
 */
class Move {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  /**
   * @private
   * @type {DataModel}
   */
  _data;
  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////

  /**
   * @constructor
   * @param {DataModel} data
   */
  constructor(data) {

  }
  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method
   * @static
   * @return {Move}
   */
  static createInstance(data) {
    return new Move(data);
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default Move;
