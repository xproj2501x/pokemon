/**
 * Player Assemblage
 * ===
 *
 * @module playerAssemblage
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////
import Assemblage from '../../engine/assemblage';
import {COMPONENT_TYPE} from '../components';

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////
const DEFAULTS = [
  {
    type: COMPONENT_TYPE.HEALTH,
    state: {
      x: 0,
      y: 0
    }
  }
];

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * PlayerAssemblage
 * @class
 * @extends Assemblage
 */
class PlayerAssemblage extends Assemblage {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////

  /**
   * PlayerAssemblage
   * @constructor
   */
  constructor(entityManager, componentManager) {
    super(entityManager, componentManager, DEFAULTS);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  static create(entityManager, componentManager, data) {
    const ASSEMBLAGE = new PlayerAssemblage(entityManager, componentManager);
    ASSEMBLAGE.build(data);
  }

}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default PlayerAssemblage;
