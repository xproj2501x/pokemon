/**
 * RNG
 * ===
 *
 * @module rng
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////
const FORMAT = {
  BIN: 2,
  DEC: 10,
  HEX: 16
};
////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * RNG
 * @class
 */
class RNG {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  _seed;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////

  /**
   * RNG
   * @constructor
   */
  constructor() {
    this._setSeed();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * generates a random number
   */
  generate() {
    const MAX_LENGTH = 32;
    let result = 0x41C64E6D * parseInt(this._seed, FORMAT.BIN) + 0x6073;
    let resultBin = result.toString(FORMAT.BIN);
    let chopped = resultBin.substring(resultBin.length - MAX_LENGTH);

    this._seed = chopped;
    return this._seed.slice(0, 16);
  }
  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Sets the seed for the random number generator;
   * @private
   */
  _setSeed() {
    if (!this._seed) {
      this._seed = this._generateInt16() + this._generateInt16();
    }
  }

  _zeroFill(value, length) {
    while (value.length > length) {
      value = '0' + value;
    }
    return value;
  }

  _generateInt16() {
    let value = Math.floor((1 + Math.random()) * 0x10000).toString(FORMAT.HEX).substring(1);
    return parseInt(value, FORMAT.HEX).toString(2);
  }
  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method
   * @static
   * @return {RNG}
   */
  static create() {
    return new RNG();
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default RNG;
