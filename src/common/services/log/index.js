/**
 * Log Service
 * ===
 *
 * @module logService
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////
import Log from './log';
import Logger from './logger';

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * LogService
 * @class
 */
class LogService {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  /**
   * @private
   * @type {Log}
   */
  _log;

  /**
   * @private
   * @type {Array}
   */
  _loggers;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////

  /**
   * LogService
   * @constructor
   */
  constructor(log) {
    this._loggers = [];
    this._log = log;
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Registers a new logger with the service.
   * @public
   * @param {string} context - The context of the instance registering with the logger.
   *
   * @return {Logger} A new logger instance.
   */
  registerLogger(context) {
    const LOGGER = Logger.createInstance(context, this._log);

    this._loggers.push(LOGGER);
    return LOGGER;
  }
  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method.
   * @static
   * @param {int} level - The minimum level for log messages.
   *
   * @return {LogService} A new log service instance.
   */
  static createInstance(level) {
    const LOG = Log.createInstance(level);
    return new LogService(LOG);
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default LogService;
