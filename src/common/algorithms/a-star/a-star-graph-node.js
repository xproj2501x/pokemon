/**
 * A Star Graph Node
 * ===
 *
 * @module aStarGraphNode
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////
const MULTIPLIER = 1.41421;

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////

/**
 * AStarGraphNode
 * @class
 */
class AStarGraphNode {
  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  _x;
  _y;
  _weight;
  _heuristic;
  _score;
  _closed;
  _visited;
  _parent;
  _f;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////
  get x() {
    return this._x;
  }

  get y() {
    return this._y;
  }

  get weight() {
    return this._weight;
  }

  get score() {
    return this._score;
  }

  set score(value) {
    this._score = value;
  }

  get heuristic() {
    return this._heuristic;
  }

  set heuristic(value) {
    this._heuristic = value;
  }

  get closed() {
    return this._closed;
  }

  set closed(value) {
    this._closed = value;
  }

  get visited() {
    return this._visited;
  }

  set visited(value) {
    this._visited = value;
  }

  get parent() {
    return this._parent;
  }

  set parent(value) {
    this._parent = value;
  }

  get f() {
    return this._f;
  }

  set f(value) {
    this._f = value;
  }

  /**
   * GraphNode
   * @constructor
   */
  constructor(x, y, weight) {
    this._x = x;
    this._y = y;
    this._weight = weight;
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  getCost(neighbor) {
    if (neighbor && neighbor.x !== this.x && neighbor.y !== this.y) {
      return this.weight * MULTIPLIER;
    }
    return this.weight;
  }

  toString() {
    return `[x: ${this.x} y: ${this.y}]`;
  }

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method
   * @static
   * @param {int} key
   * @param {object} data
   *
   * @return {AStarGraphNode}
   */
  static createInstance(x, y, weight) {
    return new AStarGraphNode(x, y, weight);
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default AStarGraphNode;
