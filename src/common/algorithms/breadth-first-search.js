/**
 * Breadth First Search
 * ===
 *
 * @module breadthFirstSearch
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////
import Queue from '../data-structures/queue';

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////

/**
 * BreadthFirstSearch
 * @class
 */
class BreadthFirstSearch {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  _queue;
  _visited;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////


  /**
   * BreadthFirstSearch
   * @constructor
   */
  constructor() {
    this._queue = Queue.create();
    this._visited = {};
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   *
   * @param {Graph} graph - The graph to be searched.
   * @param {int} start - The key for the graph node to start with.
   * @param {int} goal - The key for the graph node to end with.
   */
  search(graph, start, goal) {
    this._visited[start] = true;
    this._queue.enqueue(start);
    while (this._queue.length) {
      const KEY = this._queue.dequeue();
      if (KEY === goal) break;

      const NODE = graph.getNode(KEY);

      NODE.edges.forEach((edge) => {
        if (!(edge in this._visited)) {
          this._queue.enqueue(edge);
          this._visited[edge] = NODE;
        }
      });
    }
    return this._visited;
  }

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method
   * @static
   * @return {BreadthFirstSearch}
   */
  static create() {
    return new BreadthFirstSearch();
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default BreadthFirstSearch;
