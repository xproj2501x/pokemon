/**
 * Binary Space Partition
 * ===
 *
 * @module binarySpacePartition
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////
import PRNG from '../math/prng';
import Vector2 from '../math/vector2';

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * BinarySpacePartition
 * @class
 */
class BinarySpacePartition {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
    /**
   * @private
   * @type {Array}
   */
  _partitions;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////

  /**
   * BinarySpacePartition
   * @constructor
   */
  constructor() {

  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   *
   * @param {object} options -
   */
  generate(width, height, iterations) {
    const PARENT_CONTAINER = {x: 0, y: 0, width: width, height: height};

    this._splitContainer(PARENT_CONTAINER, iterations);
    return this._partitions;
  }

  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////
  _splitContainer(container, iteration) {
    if (iteration > 0) {
      const DIFFERENCE = container.width - container.height;

    } else {
      this._partitions.push(container);
    }
  }

  _random(min, max){
    return Math.floor(Math.random() * (max - min + 1) + min);
  }
  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method
   * @static
   * @return {BinarySpacePartition}
   */
  static create() {
    return new BinarySpacePartition();
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default BinarySpacePartition;
