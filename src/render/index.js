/**
 * Render Manager
 * ===
 *
 * @module renderManager
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////
const SCREEN_WIDTH = 80;
const SCREEN_HEIGHT = 60;
const UNIT = 10;

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * RenderManager
 * @class
 */
class RenderManager {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  _container;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////

  /**
   * RenderManager
   * @constructor
   * @param {HTMLElement} container - The container element for the canvas.
   */
  constructor(container) {
    this._container = container;
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  render(sprite) {
    const CANVAS = document.createElement('canvas');
    const CONTEXT = CANVAS.getContext('2d');

    CANVAS.height = SCREEN_HEIGHT * UNIT;
    CANVAS.width = SCREEN_WIDTH * UNIT;
    CONTEXT.save();
    CONTEXT.fillStyle = 'rgb(255, 0, 0)';
    CONTEXT.rect(sprite.x * UNIT, sprite.y * UNIT, 10, 10);
    CONTEXT.fill();
    CONTEXT.restore();
    if (this._container.firstChild) {
      this._container.removeChild(this._container.firstChild);
    }
    this._container.append(CANVAS);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method
   * @param {string} containerId - The id for the container element.
   */
  static create(containerId) {
    const CONTAINER = document.getElementById(containerId);

    return new RenderManager(CONTAINER);
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default RenderManager;
