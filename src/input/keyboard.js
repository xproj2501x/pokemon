/**
 * Keyboard
 * ===
 *
 * @module keyboard
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////
import Key from './key';

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////
const KEY_DOWN = 'keydown';
const KEY_UP = 'keyup';

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * Keyboard
 * @class
 */
class Keyboard {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  /**
   * @private
   * @type {Array}
   */
  _keys;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////
  /**
   * @readonly
   * @return {Array}
   */
  get keys() {
    return this._keys;
  }

  /**
   * Keyboard
   * @constructor
   */
  constructor() {
    this._keys = [];
    document.addEventListener(KEY_DOWN, (event) => this.onKey(event));
    document.addEventListener(KEY_UP, (event) => this.onKey(event));
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  onKey(event) {
    event.preventDefault();
    const KEY_CODE = event.keyCode;

    if (this._keys[KEY_CODE]) {
      const KEY = this._keys[KEY_CODE];

      KEY.update(event);
    } else {
      this._keys[KEY_CODE] = Key.create(event);
    }
  }

  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////


  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method.
   * @static
   * @return {Keyboard}
   */
  static create() {
    return new Keyboard();
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default Keyboard;
