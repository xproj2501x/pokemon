/**
 * Key
 * ===
 *
 * @module key
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////
const KEY_DOWN = 'keydown';
const KEY_UP = 'keyup';

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * Key
 * @class
 */
class Key {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  /**
   * @private
   * @type {number}
   */
  _code;

  /**
   * @private
   * @type {boolean}
   */
  _isDown;

  /**
   * @private
   * @type {boolean}
   */
  _altDown;

  /**
   * @private
   * @type {boolean}
   */
  _ctrlDown;

  /**
   * @private
   * @type {boolean}
   */
  _shiftDown;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////

  /**
   * Key
   * @constructor
   * @param {KeyboardEvent} event - The keyboard event.
   */
  constructor(event) {
    this._code = event.keyCode;
    this.update(event);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   *
   * @param {KeyboardEvent} event - The keyboard event.
   */
  update(event) {
    event.preventDefault();
    if (this._code !== event.keyCode) throw new Error('Error: Invalid key code for event');

    if (event.type === KEY_DOWN) {
      this._altDown = event.altKey;
      this._ctrlDown = event.ctrlKey;
      this._shiftDown = event.shiftKey;
      if (this._isDown) {

      } else {
        this._isDown = true;
      }
    } else if (event.type === KEY_UP) {
      this._reset();
    }
  }

  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////
  
  _reset() {
    this._isDown = false;
    this._altDown = false;
    this._ctrlDown = false;
    this._shiftDown = false;
  }

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method.
   * @static
   * @param {KeyboardEvent} event - The keyboard event.
   *
   * @return {Key}
   */
  static create(event) {
    return new Key(event);
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default Key;
